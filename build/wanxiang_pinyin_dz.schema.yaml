__build_info:
  rime_version: 1.11.2
  timestamps:
    config_pinyin: 1735469830
    config_pinyin.custom: 0
    default: 1717774589
    default.custom: 1735469830
    key_bindings: 1717774589
    key_bindings.custom: 0
    punctuation: 1717774589
    punctuation.custom: 0
    wanxiang_pinyin_dz.custom: 0
    wanxiang_pinyin_dz.schema: 1735469830
algebra_flypy:
  __append:
    - "xlit/āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜü/aaaaooooeeeeiiiiuuuuvvvvv/"
    - "derive/^([jqxy])u(;.*)$/$1v$2/"
    - "derive/^([aoe])([ioun])(;.*)$/$1$1$2$3/"
    - "xform/^([aoe])(ng)?(;.*)$/$1$1$2$3/"
    - "xform/^(\\w+?)iu(;.*)/$1Ⓠ$2/"
    - "xform/^(\\w+?)ei(;.*)/$1Ⓦ$2/"
    - "xform/^(\\w+?)uan(;.*)/$1Ⓡ$2/"
    - "xform/^(\\w+?)[uv]e(;.*)/$1Ⓣ$2/"
    - "xform/^(\\w+?)un(;.*)/$1Ⓨ$2/"
    - "xform/^(\\w+?)uo(;.*)/$1Ⓞ$2/"
    - "xform/^(\\w+?)ie(;.*)/$1Ⓟ$2/"
    - "xform/^(\\w+?)i?ong(;.*)/$1Ⓢ$2/"
    - "xform/^(\\w+?)ing(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)uai(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)ai(;.*)/$1Ⓓ$2/"
    - "xform/^(\\w+?)eng(;.*)/$1Ⓖ$2/"
    - "xform/^(\\w+?)en(;.*)/$1Ⓕ$2/"
    - "xform/^(\\w+?)[iu]ang(;.*)/$1Ⓛ$2/"
    - "xform/^(\\w+?)ang(;.*)/$1Ⓗ$2/"
    - "xform/^(\\w+?)ian(;.*)/$1Ⓜ$2/"
    - "xform/^(\\w+?)an(;.*)/$1Ⓙ$2/"
    - "xform/^(\\w+?)ou(;.*)/$1Ⓩ$2/"
    - "xform/^(\\w+?)iao(;.*)/$1Ⓝ$2/"
    - "xform/^(\\w+?)[iu]a(;.*)/$1Ⓧ$2/"
    - "xform/^(\\w+?)ao(;.*)/$1Ⓒ$2/"
    - "xform/^(\\w+?)ui(;.*)/$1Ⓥ$2/"
    - "xform/^(\\w+?)in(;.*)/$1Ⓑ$2/"
    - "xform/^sh/Ⓤ/"
    - "xform/^ch/Ⓘ/"
    - "xform/^zh/Ⓥ/"
    - "xlit/ⓆⓌⓇⓉⓎⓊⒾⓄⓅⓈⒹⒻⒼⒽⒿⓀⓁⓏⓍⒸⓋⒷⓃⓂ/qwrtyuiopsdfghjklzxcvbnm/"
algebra_pinyin:
  __append:
    - "erase/^xx;.*$/"
engine:
  filters:
    - uniquifier
  processors:
    - ascii_composer
    - key_binder
    - speller
    - recognizer
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - fallback_segmentor
  translators:
    - table_translator
fuzhu_jdh:
  __append:
    - "xform|^(.{2});(.*?);.*$|$1;$2|"
    - "xform|^(\\w+?);(.*?);.*$|$1;$2|"
    - "derive/^(.{2}|\\w+?);.*$/$1/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1[$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1[$2/"
    - "abbrev/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3/"
    - "abbrev/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2$3/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);(\\w)(\\w).*$|$1$2$3/|"
    - "derive/^(.{2}|\\w+?);.*,(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
fuzhu_kong:
  __append:
    - "xform/;.*$//"
key_binder:
  bindings:
    - {accept: "Control+p", send: Up, when: composing}
    - {accept: "Control+n", send: Down, when: composing}
    - {accept: "Control+b", send: Left, when: composing}
    - {accept: "Control+f", send: Right, when: composing}
    - {accept: "Control+a", send: Home, when: composing}
    - {accept: "Control+e", send: End, when: composing}
    - {accept: "Control+d", send: Delete, when: composing}
    - {accept: "Control+k", send: "Shift+Delete", when: composing}
    - {accept: "Control+h", send: BackSpace, when: composing}
    - {accept: "Control+g", send: Escape, when: composing}
    - {accept: "Control+bracketleft", send: Escape, when: composing}
    - {accept: "Control+y", send: Page_Up, when: composing}
    - {accept: "Alt+v", send: Page_Up, when: composing}
    - {accept: "Control+v", send: Page_Down, when: composing}
    - {accept: ISO_Left_Tab, send: "Shift+Left", when: composing}
    - {accept: "Shift+Tab", send: "Shift+Left", when: composing}
    - {accept: Tab, send: "Shift+Right", when: composing}
    - {accept: minus, send: Page_Up, when: has_menu}
    - {accept: equal, send: Page_Down, when: has_menu}
    - {accept: comma, send: Page_Up, when: paging}
    - {accept: period, send: Page_Down, when: has_menu}
    - {accept: "Control+Shift+1", select: .next, when: always}
    - {accept: "Control+Shift+2", toggle: ascii_mode, when: always}
    - {accept: "Control+Shift+3", toggle: full_shape, when: always}
    - {accept: "Control+Shift+4", toggle: simplification, when: always}
    - {accept: "Control+Shift+5", toggle: extended_charset, when: always}
    - {accept: "Control+Shift+exclam", select: .next, when: always}
    - {accept: "Control+Shift+at", toggle: ascii_mode, when: always}
    - {accept: "Control+Shift+numbersign", toggle: full_shape, when: always}
    - {accept: "Control+Shift+dollar", toggle: simplification, when: always}
    - {accept: "Control+Shift+percent", toggle: extended_charset, when: always}
  import_preset: default
lookup:
  __append:
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1`/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1`$2/"
    - "derive/^(.{2}|\\w+?);.*$/`$1/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/`$1$2/"
    - "abbrev/^(.{2}|\\w+?);(\\w)(\\w).*$/`$1$2$3/ `引导符+二位辅助码的情况"
menu:
  alternative_select_labels:
    - "␣"
    - ";"
    - "3'"
    - "4["
    - "5]"
    - 6
    - 7
    - 8
    - 9
    - 0
  page_size: 5
old_speller:
  __append:
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/\\1\\2\\3\\4/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/\\1\\2`/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/\\1\\2``/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/\\1\\2\\3`/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/\\1\\2`\\4/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/``\\3\\4/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/`\\2\\3\\4/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/``\\3/"
    - "derive/^(\\w)(\\w);(\\w)(\\w)$/```\\4/"
recognizer:
  import_preset: default
  patterns:
    email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"
    uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$"
schema:
  author:
    - "amorphobia <xu350n9@gmail.com>"
    - "gaboolic,amzxyz"
    - "方案修改：zHon"
  description: |
    万象拼音 支持常见双拼方案和全拼输入

  name: "万象拼音·单字"
  schema_id: wanxiang_pinyin_dz
  version: "2024-11-07"
set_algebra_fuzhu:
  __append:
    - "xform|^(.{2});.*?;(.*?);.*$|$1;$2|"
    - "xform|^(\\w+?);.*?;(.*?);.*$|$1;$2|"
    - "derive/^(.{2}|\\w+?);.*$/$1/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1[$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1[$2/"
    - "abbrev/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3/"
    - "abbrev/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2$3/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);(\\w)(\\w).*$|$1$2$3/|"
    - "derive/^(.{2}|\\w+?);.*,(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
set_shuru_schema:
  __append:
    - "xlit/āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜü/aaaaooooeeeeiiiiuuuuvvvvv/"
    - "derive/^([jqxy])u(;.*)$/$1v$2/"
    - "derive/^([aoe])([ioun])(;.*)$/$1$1$2$3/"
    - "xform/^([aoe])(ng)?(;.*)$/$1$1$2$3/"
    - "xform/^(\\w+?)iu(;.*)/$1Ⓠ$2/"
    - "xform/^(\\w+?)ei(;.*)/$1Ⓦ$2/"
    - "xform/^(\\w+?)uan(;.*)/$1Ⓡ$2/"
    - "xform/^(\\w+?)[uv]e(;.*)/$1Ⓣ$2/"
    - "xform/^(\\w+?)un(;.*)/$1Ⓨ$2/"
    - "xform/^(\\w+?)uo(;.*)/$1Ⓞ$2/"
    - "xform/^(\\w+?)ie(;.*)/$1Ⓟ$2/"
    - "xform/^(\\w+?)i?ong(;.*)/$1Ⓢ$2/"
    - "xform/^(\\w+?)ing(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)uai(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)ai(;.*)/$1Ⓓ$2/"
    - "xform/^(\\w+?)eng(;.*)/$1Ⓖ$2/"
    - "xform/^(\\w+?)en(;.*)/$1Ⓕ$2/"
    - "xform/^(\\w+?)[iu]ang(;.*)/$1Ⓛ$2/"
    - "xform/^(\\w+?)ang(;.*)/$1Ⓗ$2/"
    - "xform/^(\\w+?)ian(;.*)/$1Ⓜ$2/"
    - "xform/^(\\w+?)an(;.*)/$1Ⓙ$2/"
    - "xform/^(\\w+?)ou(;.*)/$1Ⓩ$2/"
    - "xform/^(\\w+?)iao(;.*)/$1Ⓝ$2/"
    - "xform/^(\\w+?)[iu]a(;.*)/$1Ⓧ$2/"
    - "xform/^(\\w+?)ao(;.*)/$1Ⓒ$2/"
    - "xform/^(\\w+?)ui(;.*)/$1Ⓥ$2/"
    - "xform/^(\\w+?)in(;.*)/$1Ⓑ$2/"
    - "xform/^sh/Ⓤ/"
    - "xform/^ch/Ⓘ/"
    - "xform/^zh/Ⓥ/"
    - "xlit/ⓆⓌⓇⓉⓎⓊⒾⓄⓅⓈⒹⒻⒼⒽⒿⓀⓁⓏⓍⒸⓋⒷⓃⓂ/qwrtyuiopsdfghjklzxcvbnm/"
speller:
  algebra:
    - "xlit/āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜü/aaaaooooeeeeiiiiuuuuvvvvv/"
    - "derive/^([jqxy])u(;.*)$/$1v$2/"
    - "derive/^([aoe])([ioun])(;.*)$/$1$1$2$3/"
    - "xform/^([aoe])(ng)?(;.*)$/$1$1$2$3/"
    - "xform/^(\\w+?)iu(;.*)/$1Ⓠ$2/"
    - "xform/^(\\w+?)ei(;.*)/$1Ⓦ$2/"
    - "xform/^(\\w+?)uan(;.*)/$1Ⓡ$2/"
    - "xform/^(\\w+?)[uv]e(;.*)/$1Ⓣ$2/"
    - "xform/^(\\w+?)un(;.*)/$1Ⓨ$2/"
    - "xform/^(\\w+?)uo(;.*)/$1Ⓞ$2/"
    - "xform/^(\\w+?)ie(;.*)/$1Ⓟ$2/"
    - "xform/^(\\w+?)i?ong(;.*)/$1Ⓢ$2/"
    - "xform/^(\\w+?)ing(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)uai(;.*)/$1Ⓚ$2/"
    - "xform/^(\\w+?)ai(;.*)/$1Ⓓ$2/"
    - "xform/^(\\w+?)eng(;.*)/$1Ⓖ$2/"
    - "xform/^(\\w+?)en(;.*)/$1Ⓕ$2/"
    - "xform/^(\\w+?)[iu]ang(;.*)/$1Ⓛ$2/"
    - "xform/^(\\w+?)ang(;.*)/$1Ⓗ$2/"
    - "xform/^(\\w+?)ian(;.*)/$1Ⓜ$2/"
    - "xform/^(\\w+?)an(;.*)/$1Ⓙ$2/"
    - "xform/^(\\w+?)ou(;.*)/$1Ⓩ$2/"
    - "xform/^(\\w+?)iao(;.*)/$1Ⓝ$2/"
    - "xform/^(\\w+?)[iu]a(;.*)/$1Ⓧ$2/"
    - "xform/^(\\w+?)ao(;.*)/$1Ⓒ$2/"
    - "xform/^(\\w+?)ui(;.*)/$1Ⓥ$2/"
    - "xform/^(\\w+?)in(;.*)/$1Ⓑ$2/"
    - "xform/^sh/Ⓤ/"
    - "xform/^ch/Ⓘ/"
    - "xform/^zh/Ⓥ/"
    - "xlit/ⓆⓌⓇⓉⓎⓊⒾⓄⓅⓈⒹⒻⒼⒽⒿⓀⓁⓏⓍⒸⓋⒷⓃⓂ/qwrtyuiopsdfghjklzxcvbnm/"
    - "xform|^(.{2});.*?;(.*?);.*$|$1;$2|"
    - "xform|^(\\w+?);.*?;(.*?);.*$|$1;$2|"
    - "derive/^(.{2}|\\w+?);.*$/$1/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1[$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2/"
    - "derive/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1[$2/"
    - "abbrev/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3/"
    - "abbrev/^(.{2}|\\w+?);.*?,(\\w)(\\w).*$/$1$2$3/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);(\\w)(\\w).*$|$1$2$3/|"
    - "derive/^(.{2}|\\w+?);.*,(\\w)(\\w).*$/$1$2$3o/"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(\\w+?);.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive|^(.{2});.*,(\\w)(\\w).*$|$1$2$3/|"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1`/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/$1`$2/"
    - "derive/^(.{2}|\\w+?);.*$/`$1/"
    - "derive/^(.{2}|\\w+?);(\\w)(\\w).*$/`$1$2/"
    - "abbrev/^(.{2}|\\w+?);(\\w)(\\w).*$/`$1$2$3/ `引导符+二位辅助码的情况"
  alphabet: "zyxwvutsrqponmlkjihgfedcba`;/"
  delimiter: " '"
  initials: "zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`"
switches:
  - name: ascii_mode
    reset: 0
translator:
  dictionary: wanxiang_pinyin_dz
  disable_user_dict_for_patterns:
    - "^z.*$"
  enable_charset_filter: false
  enable_completion: true
  enable_sentence: false
  enable_user_dict: false